<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redis on 小蜜蜂</title>
    <link>https://xumf.github.io/tags/redis/</link>
    <description>Recent content in Redis on 小蜜蜂</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2018  xumf.net&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 22 Apr 2018 15:43:54 +0800</lastBuildDate>
    
	<atom:link href="https://xumf.github.io/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redis分布式锁</title>
      <link>https://xumf.github.io/blog/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</link>
      <pubDate>Sun, 22 Apr 2018 15:43:54 +0800</pubDate>
      
      <guid>https://xumf.github.io/blog/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</guid>
      <description>代码实现分布式锁 springboot依赖 &amp;lt;!-- StringRedisTemplate需要 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-data-redis&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- @slf4j注解使用 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.16.6&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  实现逻辑  方法：返回值true代表获取锁成功，返回值false则相反
方法：参数value=当前时间+超时时间
方法：参数key为redis的键
  判断key是否已存在，不存在就新增，返回true，已存在不改变原有key的value，返回false 获取key对应的cuurentValue（设value时间+超时时间） 判断锁是否超过有效期， 是否有效 = 有效期（value） &amp;lt; 系统当前时间 如果没有过期证明锁还在被使用，直接返回false，如果已经过期，说明锁还在被使用，并且超过了有效期，所以执行第五步 通过 getAndSet 先返回key的值，并且给key设置新的值 判断旧的值与过了有效期的值是否相等，如果等于就返回true，否则返回false  代码 package com.xumf.service; import lombok.extern.slf4j.Slf4j; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.data.redis.core.StringRedisTemplate; import org.springframework.stereotype.Component; import org.springframework.util.StringUtils; @Component @Slf4j public class RedisLock { @Autowired private StringRedisTemplate redisTemplate; /** * 加锁 * @param key * @param value 当前时间+超时时间 * @return */ public boolean lock(String key, String value) { if (redisTemplate.</description>
    </item>
    
    <item>
      <title>Redis压测</title>
      <link>https://xumf.github.io/blog/redis-pressure-test/</link>
      <pubDate>Sun, 22 Apr 2018 15:40:53 +0800</pubDate>
      
      <guid>https://xumf.github.io/blog/redis-pressure-test/</guid>
      <description>#（100个并发连接，100000个请求） $ redis-benchmark -h 127.0.0.1 -p 6379 -c 100 -n 100000  #（-d 存取大小为100字节的数据包, -q 简单输出） $ redis-benchmark -h 127.0.0.1 -p 6379 -q -d 100  #（-t 测试的类别） $ redis-benchmark -t set,lpush -q -n 100000  #（script local 指的是就执行script local跟着的命令） redis-benchmark -n 100000 -q script load &amp;quot;redis.call(‘set’,’foo’,’bar’)&amp;quot;  </description>
    </item>
    
    <item>
      <title>Redis命令</title>
      <link>https://xumf.github.io/blog/redis%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Thu, 19 Apr 2018 21:09:25 +0800</pubDate>
      
      <guid>https://xumf.github.io/blog/redis%E5%91%BD%E4%BB%A4/</guid>
      <description>redis的启动命令  启动客户端
$ redis-cli  关闭客户端
$ redis-cli shutdown  指定端口启动
$ redis-cli -p 6380  指定端口关闭
$ redis-cli -p 6380 shutdown  指定ip启动
$ redis-cli -h 127.0.0.1  指定ip关闭
$ redis-cli -h 127.0.0.1 shutdown  指定密码启动
$ redis-cli -a 123456   redis基础命令  清除当前数据库所有的键
$ flushdb  清除全部数据库所有的键
$ flushall  测试数据库链接是否成功
$ ping  当前数据库key的数量
$ dbsize  切换数据库
$ select 数据库编号  查看当前数据库所有的key
$ keys *  持久化</description>
    </item>
    
  </channel>
</rss>