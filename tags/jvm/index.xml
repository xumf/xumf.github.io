<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JVM on 小蜜蜂</title>
    <link>https://xumf.net/tags/jvm/</link>
    <description>Recent content in JVM on 小蜜蜂</description>
    <generator>Hugo 0.125.1</generator>
    <language>zh</language>
    <copyright>&amp;copy; 2018  xumf.net&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 22 Jan 2025 13:16:53 +0800</lastBuildDate>
    <atom:link href="https://xumf.net/tags/jvm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Synchronized</title>
      <link>https://xumf.net/blog/synchronized/</link>
      <pubDate>Wed, 22 Jan 2025 13:16:53 +0800</pubDate>
      <guid>https://xumf.net/blog/synchronized/</guid>
      <description></description>
    </item>
    <item>
      <title>JMM</title>
      <link>https://xumf.net/blog/javamemorymodel/</link>
      <pubDate>Fri, 09 Jul 2021 23:36:22 +0800</pubDate>
      <guid>https://xumf.net/blog/javamemorymodel/</guid>
      <description>1：基本操作流程（单线程） sequenceDiagram participant 主内存 participant 工作内存 participant 线程 Note over 主内存,工作内存: 读取变量（主内存 → 工作内存） 线程 -&gt;&gt; 主内存: read(var) 主内存 --&gt;&gt; 工作内存: 传输变量值 线程 -&gt;&gt; 工作内存: load(var) Note over 工作内存: 修改变量（工作内存内操作） 线程 -&gt;&gt; 工作内存: assign(var, newValue) Note over 工作内存,主内存: 写回变量（工作内存 → 主内存） 线程 -&gt;&gt; 工作内存: store(var) 工作内存 --&gt;&gt; 主内存: 传输变量值 线程 -&gt;&gt; 主内存: write(var) 2：多线程下的原子性问题 sequenceDiagram participant 主内存 participant 工作内存A participant 线程A participant 工作内存B participant 线程B rect rgba(255, 0, 0, 0.1) Note left of 线程A: 线程A操作 线程A -&gt;&gt; 主内存: read(var) 主内存 --&gt;&gt; 工作内存A: var=0 线程A -&gt;&gt; 工作内存A: load(var) 线程A -&gt;&gt; 工作内存A: assign(var, 1) 线程A -&gt;&gt; 工作内存A: store(var) 工作内存A --&gt;&gt; 主内存: 准备写入var=1 end rect rgba(0, 255, 0, 0.</description>
    </item>
    <item>
      <title>JVM 问题排查</title>
      <link>https://xumf.net/blog/jvmissuesolution/</link>
      <pubDate>Sun, 12 Jul 2020 13:16:53 +0800</pubDate>
      <guid>https://xumf.net/blog/jvmissuesolution/</guid>
      <description>可正常运行系统： 通过jmap来查看JVM中各个区域的使用情况 通过jstack来查看线程的运行情况，比如哪些线程阻塞、是否出现死锁 通过jstat来查看垃圾回收情况，特别是fullgc，如果发现fullgc比较频繁，那么就得进行调优 通过各个命令的结果或者jvisualvm等工具来进行分析 首先：初步猜测频发发送fullgc的原因，如果频繁发生fullgc，但是又一直没有出现内存溢出，那么表示fullgc实际上回收了很多对象，所以这些对象最好能在younggc过程中直接回收掉，避免这些对象进入到老年代，对于这种情况，就要考虑这些存活时间不长的对象是不是比较大，导致年轻代放不下，直接进入到老年代，尝试加大年轻代的大小，如果改完之后，fullgc减少，则证明修改有效 同时，还可以找到占用CPU最多的线程，定位到具体的方法，优化这个方法的执行，看是否能避免某些对象的创建，从而节省内存 运行中发生OOM的系统： 一般生产系统中都会设置当前系统发生了OOM时，生成当时的dump文件（-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/usr/local/base） 我们可以利用jvisualvm等工具来分析dump文件 根据dump文件找到异常的实例对象和异常的线程（占用CPU高），定位到具体代码 然后再进行详细的分析和调试 </description>
    </item>
    <item>
      <title>垃圾回收器</title>
      <link>https://xumf.net/blog/garbagecollector/</link>
      <pubDate>Wed, 18 Jul 2018 15:43:54 +0800</pubDate>
      <guid>https://xumf.net/blog/garbagecollector/</guid>
      <description>一、JVM 垃圾回收器概述 常见的垃圾回收器：&#xA;Serial GC Parallel GC（Throughput GC） CMS GC（Concurrent Mark Sweep） G1 GC（Garbage First） ZGC（Z Garbage Collector） Shenandoah GC 二、垃圾回收器的特点与回收流程 Serial GC 特点： 单线程垃圾回收 适用于单核 CPU 或小型应用 回收时会暂停所有应用线程（Stop-The-World，STW） 回收流程： 新生代：使用复制算法（Copying） 老年代：使用标记-整理算法（Mark-Compact） 适用场景： 客户端应用和小型服务端应用 重要参数： -XX:UseSerialGC ：启用 Serial GC Parallel GC（Throughput GC） 特点： 多线程垃圾回收器 目标是最大化吞吐量（Throughput） 回收时会暂停所有应用线程（STW） 回收流程： 新生代：使用复制算法（Copying） 老年代：使用标记-整理算法（Mark-Compact） 适用场景： 多核 CPU 且对吞吐量要求高的应用 重要参数： -XX:+UseParallelGC ：启用 Parallel GC -XX:ParallelGCThreads ：设置并行 GC 线程数 -XX:MaxGCPauseMillis ：设置最大 CG 暂停时间目标 -XX:GCTimeRatio ：设置吞吐量目标（GC 时间与总时间目标） CMS GC（Concurrent Mark Sweep） 特点： 并发垃圾回收器，尽量减少 STW 时间 适用于对延迟敏感的应用 使用标记-清除算法（Mark-Sweep），会产生内存碎片 回收流程： 初始标记（STW）：标记 GC Roots 直接关联对象 并发标记：并发标记所有可达对象 重新标记（STW）：修正并发标记期间的变化 并发清除：并发清除不可达对象 适用场景： 对延迟敏感的应用，如 Web 服务 重要参数： -XX:+UseConcMarkSweepGC ：启用 CMS GC -XX:CMSInitiatingOccupancyFraction ：设置老年代使用率触发 CMS 的阈值（默认 68%） -XX:UseCMSCompactAtFullCollection ：在 Full GC 时进行内存整理 -XX:CMSFullGCsBeforeCompaction ：设置多少次 Full GC 后进行内存整理 G1 GC（Garbage First） 特点： 面向服务端应用的垃圾回收器 将堆内存划分为多个 Region，优先回收垃圾最多的 Region 目标是平衡吞吐量和延迟 回收流程： 初始标记（STW）：标记 GC Roots 直接关联的对象 并发标记：标记所有的可达对象 最终标记（STW）：修正并发标记期间的变化 筛选回收（STW）：根据回收价值排序 Region，优先回收垃圾最多的 Region 适用场景： 大内存、多核 CPU 的应用 重要参数： -XX:+UseG1GC ：启用 G1 GC -XX:MaxGCPauseMillis ：设置最大 GC 暂停时间的目标（默认 200ms） -XX:G1HeapRegionSize ：设置 G1 Region 的大小 -XX:InitiatingHeapOccupancyPercent ：设置堆使用率触发并发标记的阈值（默认 45%） ZGC（Z Garbage Collector） 特点： 低延迟垃圾回收器，STW 时间极短（通常少于 10ms） 支持最大堆内存（TB 级别） 使用染色指针（Colored Pointers）和读屏障（Load Barrier）技术 回收流程： 1.</description>
    </item>
  </channel>
</rss>
