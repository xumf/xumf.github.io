<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RabbitMQ on 小蜜蜂</title>
    <link>http://xumf.net/tags/rabbitmq/</link>
    <description>Recent content in RabbitMQ on 小蜜蜂</description>
    <generator>Hugo 0.125.1</generator>
    <language>zh</language>
    <copyright>&amp;copy; 2018  xumf.net&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 03 May 2018 20:54:29 +0800</lastBuildDate>
    <atom:link href="http://xumf.net/tags/rabbitmq/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RabbitMQ 深入浅出</title>
      <link>http://xumf.net/blog/rabbitmq/</link>
      <pubDate>Thu, 03 May 2018 20:54:29 +0800</pubDate>
      <guid>http://xumf.net/blog/rabbitmq/</guid>
      <description>RabbitMQ 知识架构 1. AMQP 协议基础 RabbitMQ 是 AMQP 0-9-1 协议的实现，其核心模型基于信道(Channel)、**交换机(Exchange)和队列(Queue)**的协作。&#xA;AMQP 协议分层：分为 Module Layer（定义业务命令）、Session Layer（处理命令传输与同步）、Transpot Layer（二进制数据传输）。 信道(Channel)：基于 TCP 连接的虚拟链路，复用 TCP 连接以降低开销，每个信道独立处理消息路由，支持多线程并发操作。 虚拟主机(VHost)：逻辑隔离的独立环境，每个 VHost 拥有自己的交换机、队列和权限。 帧(Frame)：AMQP 数据传输的最小单位，包含帧头、帧体和帧尾，用于封装消息和协议指令。 2. 消息流转原理 消息从生产者到消费者的完整生命周期如下：&#xA;(1)生产者发送消息&#xA;连接建立：生产者通过 TCP 连接到 RabbitMQ 节点，并创建信道。 消息封装：消息包含有效负载(Playload) + 元数据(Headers、Routing Key、Delivery Mode 等)。 发送到交换器：生产者通过basic.publish 方法将消息发送到指定的交换器。 关键参数：exchange （目标交换器）、routing_key （路由键）、mandatory （消息无法路由时是否返回错误）。 (2)交换器路由消息&#xA;交换器根据类型和绑定规则将消息路由到队列：&#xA;Direct Exchange：精确匹配routing_key 和binding_key ，类似哈希表查找。 Fanout Exchange：广播到所有绑定的队列，忽略routing_key 。 Topic Exchange：基于通配符的层次化匹配，内部使用Trie 树或哈希表优化路由效率。 Headers Exchange：通过headers 键值对匹配，性能较低，适用于复杂条件路由。 (3)队列存储消息&#xA;消息进入队列后，按**先进先出(FIFO)**顺序存储，但优先级队列(Priority Queue)可调整顺序。&#xA;持久化队列：元数据和消息（若标记为持久化）写入磁盘，重启后恢复。 内存队列：仅存储在内存，重启后丢失。 (4)消息者拉取消息&#xA;订阅队列：消费者通过basic.consume 订阅队列，进入阻塞等待状态。 消息推送：RabbitMQ 通过basic.</description>
    </item>
  </channel>
</rss>
