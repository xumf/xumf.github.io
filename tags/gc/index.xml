<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GC on 小蜜蜂</title>
    <link>http://localhost:1313/tags/gc/</link>
    <description>Recent content in GC on 小蜜蜂</description>
    <generator>Hugo 0.125.1</generator>
    <language>zh</language>
    <copyright>&amp;copy; 2018  xumf.net&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 18 Jul 2018 15:43:54 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/gc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>垃圾回收器</title>
      <link>http://localhost:1313/blog/garbagecollector/</link>
      <pubDate>Wed, 18 Jul 2018 15:43:54 +0800</pubDate>
      <guid>http://localhost:1313/blog/garbagecollector/</guid>
      <description>一、JVM 垃圾回收器概述 常见的垃圾回收器：&#xA;Serial GC Parallel GC（Throughput GC） CMS GC（Concurrent Mark Sweep） G1 GC（Garbage First） ZGC（Z Garbage Collector） Shenandoah GC 二、垃圾回收器的特点与回收流程 Serial GC 特点： 单线程垃圾回收 适用于单核 CPU 或小型应用 回收时会暂停所有应用线程（Stop-The-World，STW） 回收流程： 新生代：使用复制算法（Copying） 老年代：使用标记-整理算法（Mark-Compact） 适用场景： 客户端应用和小型服务端应用 重要参数： -XX:UseSerialGC ：启用 Serial GC Parallel GC（Throughput GC） 特点： 多线程垃圾回收器 目标是最大化吞吐量（Throughput） 回收时会暂停所有应用线程（STW） 回收流程： 新生代：使用复制算法（Copying） 老年代：使用标记-整理算法（Mark-Compact） 适用场景： 多核 CPU 且对吞吐量要求高的应用 重要参数： -XX:+UseParallelGC ：启用 Parallel GC -XX:ParallelGCThreads ：设置并行 GC 线程数 -XX:MaxGCPauseMillis ：设置最大 CG 暂停时间目标 -XX:GCTimeRatio ：设置吞吐量目标（GC 时间与总时间目标） CMS GC（Concurrent Mark Sweep） 特点： 并发垃圾回收器，尽量减少 STW 时间 适用于对延迟敏感的应用 使用标记-清除算法（Mark-Sweep），会产生内存碎片 回收流程： 初始标记（STW）：标记 GC Roots 直接关联对象 并发标记：并发标记所有可达对象 重新标记（STW）：修正并发标记期间的变化 并发清除：并发清除不可达对象 适用场景： 对延迟敏感的应用，如 Web 服务 重要参数： -XX:+UseConcMarkSweepGC ：启用 CMS GC -XX:CMSInitiatingOccupancyFraction ：设置老年代使用率触发 CMS 的阈值（默认 68%） -XX:UseCMSCompactAtFullCollection ：在 Full GC 时进行内存整理 -XX:CMSFullGCsBeforeCompaction ：设置多少次 Full GC 后进行内存整理 G1 GC（Garbage First） 特点： 面向服务端应用的垃圾回收器 将堆内存划分为多个 Region，优先回收垃圾最多的 Region 目标是平衡吞吐量和延迟 回收流程： 初始标记（STW）：标记 GC Roots 直接关联的对象 并发标记：标记所有的可达对象 最终标记（STW）：修正并发标记期间的变化 筛选回收（STW）：根据回收价值排序 Region，优先回收垃圾最多的 Region 适用场景： 大内存、多核 CPU 的应用 重要参数： -XX:+UseG1GC ：启用 G1 GC -XX:MaxGCPauseMillis ：设置最大 GC 暂停时间的目标（默认 200ms） -XX:G1HeapRegionSize ：设置 G1 Region 的大小 -XX:InitiatingHeapOccupancyPercent ：设置堆使用率触发并发标记的阈值（默认 45%） ZGC（Z Garbage Collector） 特点： 低延迟垃圾回收器，STW 时间极短（通常少于 10ms） 支持最大堆内存（TB 级别） 使用染色指针（Colored Pointers）和读屏障（Load Barrier）技术 回收流程： 1.</description>
    </item>
  </channel>
</rss>
