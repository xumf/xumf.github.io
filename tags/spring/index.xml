<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring on 小蜜蜂</title>
    <link>https://xumf.github.io/tags/spring/</link>
    <description>Recent content in Spring on 小蜜蜂</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2018  xumf.net&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 26 Apr 2018 23:13:45 +0800</lastBuildDate>
    
	<atom:link href="https://xumf.github.io/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring Controller方法自定义参数</title>
      <link>https://xumf.github.io/blog/java-controller-param/</link>
      <pubDate>Thu, 26 Apr 2018 23:13:45 +0800</pubDate>
      
      <guid>https://xumf.github.io/blog/java-controller-param/</guid>
      <description>&amp;emsp;&amp;emsp;WEB应用一般在用户登录后，我们都会保存用户信息到session里面或者到redis里面，如果在请求方法中想使用就要通过session或者redis的获取，每个一个请求需要都需要重复编写这样的代码，造成代码冗余.
&amp;emsp;&amp;emsp;SpringMVC给我提供了一个接口能给Controller层的接口方法注入自定义参数，我们就可以在这里做文章，给接口参数注入用户的实例。
 文中的@Data是使用了lombok插件
  编写User类
@Data public class User { private int id; private String name; }  创建对象UserContext负责存取User的实例对象，容器使用的是ThreadLocal ， ThreadLocal 的关键每个线程都会拥有一个 ThreadLocal 的对象独享，线程之间不会共享一个 ThreadLocal ，换句话说就是一个 ThreadLocal 实例对象当且仅当属于某条线程。
public class UserContext { private static ThreadLocal&amp;lt;User&amp;gt; userHolder = new ThreadLocal&amp;lt;&amp;gt;(); // 存储user对象 public static void setUser(User user) { userHolder.set(user); } // 获取user对象 public static User getUser() { return userHolder.get(); } }  编写常量类
public class Consts { // 获取cookie中或者参数中token的标识 public static final String TOKEN_NAME = &amp;quot;token_name&amp;quot;; }  实现拦截器HandlerInterceptorAdapter，实现方法preHandle，以便于在请求处理前将User的实例对象存储在UserContext中。</description>
    </item>
    
  </channel>
</rss>