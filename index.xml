<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>小蜜蜂</title>
    <link>https://xumf.github.io/</link>
    <description>Recent content on 小蜜蜂</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2018  xumf.net&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 28 Apr 2018 13:54:50 +0800</lastBuildDate>
    
	<atom:link href="https://xumf.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>github静态网页</title>
      <link>https://xumf.github.io/blog/github-page/</link>
      <pubDate>Sat, 28 Apr 2018 13:54:50 +0800</pubDate>
      
      <guid>https://xumf.github.io/blog/github-page/</guid>
      <description>  文章下的 xumf 都要换成你的 github用户名
 第一步：创建一个repository  xumf.github.io改为你的github用户名.github.io Description(可以不填)添加备注 点击Create repository   
第二步：上传index.html到刚刚创建的repository上  clone repository到本地，$ git clone git@github.com:xumf/xumf.github.io.git 
 进入到xumf.github.io.git目录，$ cd xumf.github.io.git 
 添加一个文件并编辑，$ vim index.html，编辑完成后:wq，保存退出。
 添加，上传index.html文件到github
$ git add index.html $ git commit index.html -m &#39;init&#39; $ git push origin master  在浏览器打开https://xumf.github.io/，就能看到刚刚index.html的内容。 
  </description>
    </item>
    
    <item>
      <title>Spring Controller方法自定义参数</title>
      <link>https://xumf.github.io/blog/java-controller-param/</link>
      <pubDate>Thu, 26 Apr 2018 23:13:45 +0800</pubDate>
      
      <guid>https://xumf.github.io/blog/java-controller-param/</guid>
      <description>&amp;emsp;&amp;emsp;WEB应用一般在用户登录后，我们都会保存用户信息到session里面或者到redis里面，如果在请求方法中想使用就要通过session或者redis的获取，每个一个请求需要都需要重复编写这样的代码，造成代码冗余.
&amp;emsp;&amp;emsp;SpringMVC给我提供了一个接口能给Controller层的接口方法注入自定义参数，我们就可以在这里做文章，给接口参数注入用户的实例。
 文中的@Data是使用了lombok插件
  编写User类
@Data public class User { private int id; private String name; }  创建对象UserContext负责存取User的实例对象，容器使用的是ThreadLocal ， ThreadLocal 的关键每个线程都会拥有一个 ThreadLocal 的对象独享，线程之间不会共享一个 ThreadLocal ，换句话说就是一个 ThreadLocal 实例对象当且仅当属于某条线程。
public class UserContext { private static ThreadLocal&amp;lt;User&amp;gt; userHolder = new ThreadLocal&amp;lt;&amp;gt;(); // 存储user对象 public static void setUser(User user) { userHolder.set(user); } // 获取user对象 public static User getUser() { return userHolder.get(); } }  编写常量类
public class Consts { // 获取cookie中或者参数中token的标识 public static final String TOKEN_NAME = &amp;quot;token_name&amp;quot;; }  实现拦截器HandlerInterceptorAdapter，实现方法preHandle，以便于在请求处理前将User的实例对象存储在UserContext中。</description>
    </item>
    
    <item>
      <title>Centos Download Rabbitmq</title>
      <link>https://xumf.github.io/blog/centos-download-rabbitmq/</link>
      <pubDate>Sun, 22 Apr 2018 22:21:04 +0800</pubDate>
      
      <guid>https://xumf.github.io/blog/centos-download-rabbitmq/</guid>
      <description>到erlang官网下载erlang
 到rabbitMQ官网下载mq
 安装依赖包
$ yum install -y gcc gcc-c++ unixODBC-devel openssl-devel ncurses-devel  将下载好的两个包传送到centos服务器上
$ scp otp_src_20.1.tar.gz root@www.xumingfa.com:/usr/src/ $ scp rabbitmq-server-generic-unix-3.7.4.tar.xz root@www.xumingfa.com:/usr/src/  解压erlang包
$ tar xf otp_src_20.1.tar.gz  切换到目录otp_src_20.1
$ cd otp_src_20.1  配置.configure（安装到 /usr/local/erlang20 目录 , 忽略 javac 编译器）
$ ./configure --prefix=/usr/local/erlang20 --without-javac  编译
$ make -j 4 $ make install  解压mq包
$ cd .. $ xz -d rabbitmq-server-generic-unix-3.7.4.tar.xz $ tar xf rabbitmq-server-generic-unix-3.7.4.tar  安装依赖</description>
    </item>
    
    <item>
      <title>Java生成图片验证码</title>
      <link>https://xumf.github.io/blog/java%E7%94%9F%E6%88%90%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81%E7%A0%81/</link>
      <pubDate>Sun, 22 Apr 2018 15:49:23 +0800</pubDate>
      
      <guid>https://xumf.github.io/blog/java%E7%94%9F%E6%88%90%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81%E7%A0%81/</guid>
      <description>public BufferedImage createVerifyCode() { int width = 80; int height = 32; // 创建图片 BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB); Graphics g = image.getGraphics(); // 设置背景颜色 g.setColor(new Color(0xDCDCDC)); g.fillRect(0, 0, width, height); // 边框 g.setColor(Color.BLACK); g.drawRect(0, 0, width - 1, height - 1); // 生成随机数 Random rdm = new Random(); // 生成50个点 for (int i = 0; i &amp;lt; 50; i++) { int x = rdm.nextInt(width); int y = rdm.</description>
    </item>
    
    <item>
      <title>Redis分布式锁</title>
      <link>https://xumf.github.io/blog/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</link>
      <pubDate>Sun, 22 Apr 2018 15:43:54 +0800</pubDate>
      
      <guid>https://xumf.github.io/blog/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</guid>
      <description>package com.xumf.service; import lombok.extern.slf4j.Slf4j; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.data.redis.core.StringRedisTemplate; import org.springframework.stereotype.Component; import org.springframework.util.StringUtils; @Component @Slf4j public class RedisLock { @Autowired private StringRedisTemplate redisTemplate; /** * 加锁 * @param key * @param value 当前时间+超时时间 * @return */ public boolean lock(String key, String value) { if (redisTemplate.opsForValue().setIfAbsent(key, value)) { return true; } String currentValue = redisTemplate.opsForValue().get(key); // 如果锁过期 if (!StringUtils.isEmpty(currentValue) &amp;amp;&amp;amp; Long.parseLong(currentValue) &amp;lt; System.currentTimeMillis()) { String oldValue = redisTemplate.opsForValue().getAndSet(key, value); if (!StringUtils.isEmpty(oldValue) &amp;amp;&amp;amp; oldValue.</description>
    </item>
    
    <item>
      <title>Redis压测</title>
      <link>https://xumf.github.io/blog/redis-pressure-test/</link>
      <pubDate>Sun, 22 Apr 2018 15:40:53 +0800</pubDate>
      
      <guid>https://xumf.github.io/blog/redis-pressure-test/</guid>
      <description>#（100个并发连接，100000个请求） $ redis-benchmark -h 127.0.0.1 -p 6379 -c 100 -n 100000  #（-d 存取大小为100字节的数据包, -q 简单输出） $ redis-benchmark -h 127.0.0.1 -p 6379 -q -d 100  #（-t 测试的类别） $ redis-benchmark -t set,lpush -q -n 100000  #（script local 指的是就执行script local跟着的命令） redis-benchmark -n 100000 -q script load &amp;quot;redis.call(‘set’,’foo’,’bar’)&amp;quot;  </description>
    </item>
    
    <item>
      <title>Maven环境隔离</title>
      <link>https://xumf.github.io/blog/maven%E7%8E%AF%E5%A2%83%E9%9A%94%E7%A6%BB/</link>
      <pubDate>Sun, 22 Apr 2018 13:42:22 +0800</pubDate>
      
      <guid>https://xumf.github.io/blog/maven%E7%8E%AF%E5%A2%83%E9%9A%94%E7%A6%BB/</guid>
      <description>在pom.xml的build标签中添加
&amp;lt;resources&amp;gt; &amp;lt;resource&amp;gt; &amp;lt;!- 配置文件夹 -&amp;gt; &amp;lt;directory&amp;gt;src/main/resources.${deploy.type}&amp;lt;/directory&amp;gt; &amp;lt;excludes&amp;gt; &amp;lt;!— 打包时忽略的文件 —&amp;gt; &amp;lt;exclude&amp;gt;.jsp&amp;lt;/exclude&amp;gt; &amp;lt;/excludes&amp;gt; &amp;lt;/resource&amp;gt; &amp;lt;!- 公共资源文件文件夹 -&amp;gt; &amp;lt;resource&amp;gt; &amp;lt;directory&amp;gt;src/main/resources&amp;lt;/directory&amp;gt; &amp;lt;/resource&amp;gt; &amp;lt;/resources&amp;gt;  在pom.xml的build标签下添加
&amp;lt;profiles&amp;gt; &amp;lt;profile&amp;gt; &amp;lt;!- 开发环境 -&amp;gt; &amp;lt;id&amp;gt;dev&amp;lt;/id&amp;gt; &amp;lt;activation&amp;gt; &amp;lt;!- 默认环境 -&amp;gt; &amp;lt;activeByDefault&amp;gt;true&amp;lt;/activeByDefault&amp;gt; &amp;lt;/activation&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;deploy.type&amp;gt;dev&amp;lt;/deploy.type&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;/profile&amp;gt; &amp;lt;profile&amp;gt; &amp;lt;!- 测试环境 -&amp;gt; &amp;lt;id&amp;gt;beta&amp;lt;/id&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;deploy.type&amp;gt;beta&amp;lt;/deploy.type&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;/profile&amp;gt; &amp;lt;profile&amp;gt; &amp;lt;!- 生产环境 -&amp;gt; &amp;lt;id&amp;gt;prod&amp;lt;/id&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;deploy.type&amp;gt;prod&amp;lt;/deploy.type&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;/profile&amp;gt; &amp;lt;/profiles&amp;gt;  添加资源文件夹
 resource共享配置 resource.beta 测试环境配置 resource.dev 开发环境配置 resource.prod 生产环境配置   打包</description>
    </item>
    
    <item>
      <title>Tomcat单机部署多应用（Mac/Linux）</title>
      <link>https://xumf.github.io/blog/tomcat%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2%E5%A4%9A%E5%BA%94%E7%94%A8/</link>
      <pubDate>Sun, 22 Apr 2018 13:16:53 +0800</pubDate>
      
      <guid>https://xumf.github.io/blog/tomcat%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2%E5%A4%9A%E5%BA%94%E7%94%A8/</guid>
      <description> 按照以下步骤依次执行：  ${tomcat}为tomcat的根目录
  修改/etc/profile增加tomcat环境变量
export CATALINA_BASE=/Users/xumf/tomcat1 export CATALINA_HOME=/Users/xumf/tomcat1 export TOMCAT_HOME=/Users/xumf/tomcat1 export CATALINA_2_BASE=/Users/xumf/tomcat2 export CATALINA_2_HOME=/Users/xumf/tomcat2 export TOMCAT_2_HOME=/Users/xumf/tomcat2  保存退出，输入esc然后:wq
 执行
$ source /etc/profile  第一个tomcat不变，打开第二个tomcat目录bin下catalina.sh
$ vim ${tomcat}/bin/catalina.sh  找到# OS specific support. $var must be set to either true or false.在这行下面编辑，新增配置，保存退出
export CATALINA_BASE=$CATALINA_2_BASE export CATALINA_HOME=$CATALINA_2_HOME  打开第二个tomcat的conf目录下server.xml,$ vim ${tomcat}/conf/server.xml
 8005改为9005  8080改为9080  8009改为9009    </description>
    </item>
    
    <item>
      <title>License</title>
      <link>https://xumf.github.io/about/license/</link>
      <pubDate>Fri, 20 Apr 2018 20:50:41 +0700</pubDate>
      
      <guid>https://xumf.github.io/about/license/</guid>
      <description>The MIT License (MIT)
Copyright &amp;copy; 2018 Xumf
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &amp;ldquo;Software&amp;rdquo;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</description>
    </item>
    
    <item>
      <title>Redis命令</title>
      <link>https://xumf.github.io/blog/redis%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Thu, 19 Apr 2018 21:09:25 +0800</pubDate>
      
      <guid>https://xumf.github.io/blog/redis%E5%91%BD%E4%BB%A4/</guid>
      <description>redis的启动命令  启动客户端  $ redis-cli   关闭客户端  $ redis-cli shutdown   指定端口启动  $ redis-cli -p 6380   指定端口关闭  $ redis-cli -p 6380 shutdown   指定ip启动  $ redis-cli -h 127.0.0.1   指定ip关闭  $ redis-cli -h 127.0.0.1 shutdown   指定密码启动  $ redis-cli -a 123456  redis基础命令  清除当前数据库所有的键  $ flushdb   清除全部数据库所有的键  $ flushall   测试数据库链接是否成功  $ ping   当前数据库key的数量  $ dbsize   切换数据库  $ select 数据库编号   查看当前数据库所有的key  $ keys *   持久化  $ save   退出  $ quit  redis键基础命令  添加一个key  $ set 键 值   删除一个key  $ del 键   判断键是否存在（返回1为存在，0位不存在）  $ exists 键   查询键的剩余生存时间（-1为永远，不存在的key为-2，以秒为单位）  $ ttl 键   设置键的有效时间（10ms）  $ expire 键 10   查看键的类型  $ type 键   设置一个hash值（hset 键 字段 值）  $ hset 键 字段 值   随机键  $ randomkey   修改键的名字，无论key是否存在  $ rename 键 新键名   修改键的名字，如果key存在就不改变  $ renamenx 键 新键名   设置键并且设置有效时间（秒为单位）（setex 键 有效时间 值）  $ setex 键 100 值   设置键并且设置有效时间（毫秒为单位）（psetex 键 有效时间 值）  $ psetex 键 10000 值   通过键获取对应的值  $ get 键   获取键对应值得一段闭区间值（getrange 键 起始下标 结束下标）  $ getrange 键 0 1   设置键的时候，如果键已存在，设置成功后返回旧的值（getset 键 值）  $ getset 键 值   批量设置多个键值（mset 键 值 键 值 键 值 …）  $ mset 键 值 键 值 键 值   批量获取读个键的值（mget 键 键 键 …）  $ mget 键1 键2 键3   设置键，如果已存在则不做操作（setnx 键 值）  $ setnx 键 值   获取键对应值得长度  $ strlen 键   批量设置键值，如果有其中一个已经存在，则全部设置失败）  $ msetnx 键 值 键 值 键 值   给键对应值是integer类型的加一（键对应的值要为数值类型）  $ incr 键   给键对应值是integer类型的加一定的增量（incrby 键 增量值）  $ incrby 键 100   给键对应值是integer类型的减一  $ decr 键   给键对应值是integer类型的加一定的减量（decrby 键 减量值）  $ decrby 键 100   给键对应值追加内容  $ append 键 追加的值  hash类型的操作  查看哈希类型的键，字段是否存在（hexists 键 字段）  $ hexists 键 哈希类型的键   获取哈希类型的所有的建，以及键所有的字段的值（hgetall 键）  $ hgetall 键   获取哈希类型的键所有的字段（hkeys 键）  $ hkeys 键   获取哈希类型的键所有的字段的值（hvals 键）  $ hvals 键   获取哈希类型的键字段数量（hlen 键）  $ hlen 键   批量获取键对应的值（hmget 键 字段 字段 字段 …）  $ hmget 键 哈希类型的键1 哈希类型的键2 哈希类型的键3   批量设置键中的字段对应值（hmset 键 字段 值 字段 值 字段 值 …）  $ hmset 键 哈希类型的键1 值1 哈希类型的键2 值2 哈希类型的键3 值3   批量设置键中的字段对应值，如果对应字段已经存在则失败（hmsetnx 键 字段 值 字段 值 字段 值 …）  $ hmsetnx 键 哈希类型的键1 值1 哈希类型的键2 值2 哈希类型的键3 值3  list类型的操作  设置集合类型（lpush 键 值 值 值 值 …）  $ lpush 键 值1 值2 值3 值4 值5 值6   查看集合的长度  $ llen 键   拿集合的一个范围（lrange 键 起始下标 结束下标）  $ lrange 键 0 2   设置集合下标的对应值（lset 键 下标 值）  $ lset 键 0 89   获取集合某个下标的值（lindex 键 下标）  $ lindex 键 0   移除集合第一个元素  $ lpop 键   移除集合最后一个元素  $ rpop 键  （无序）set类型的操作  添加集合  $ sadd 键 值1 值2 值3   查看集合的所有元素</description>
    </item>
    
    <item>
      <title>最近工作</title>
      <link>https://xumf.github.io/work/recent-work/</link>
      <pubDate>Thu, 19 Apr 2018 21:09:25 +0800</pubDate>
      
      <guid>https://xumf.github.io/work/recent-work/</guid>
      <description>JIRA  jira挺好  &amp;emsp;&amp;emsp;Jira是个项目协同管理的好东西，开发的流程都是可以清晰可见，哪里有问题就可以直接找到对应的负责人，对公司的在开发方面的管理提供的强大、清晰、高度协同的作用。 * jira挺惨
 &amp;emsp;&amp;emsp;Jira的二次开发非常蛋疼，先不说只有英文的官方文档（怪自己英语不好），数据库200百多个表都是没有对应的comment，表与表的关系只能靠猜去了解，实在令人蛋疼！</description>
    </item>
    
  </channel>
</rss>